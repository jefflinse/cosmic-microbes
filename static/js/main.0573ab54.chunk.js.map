{"version":3,"sources":["simulator/Runner.js","creatures/Muscle.js","neuralnetwork/Connection.js","neuralnetwork/Neuron.js","neuralnetwork/Layer.js","Vector.js","neuralnetwork/Network.js","creatures/PhysicalObject.js","creatures/Part.js","creatures/Creature.js","simulator/Simulation.js","Graphics.js","Universe.js","UniverseView.js","App.js","serviceWorker.js","index.js"],"names":["Runner","simulation","Object","classCallCheck","this","state","ticks","ticksPerSecond","secondsPerGeneration","ticksPerGeneration","clock","setInterval","_tick","bind","clearInterval","pause","reset","start","tick","nextGeneration","Constraint","Matter","nextMuscleId","Muscle","from","to","options","_this","id","length","physics","create","bodyA","bodyB","stiffness","damping","triggers","value","_","clamp","graphics","drawLine","position","lineWidth","strokeStyle","Connection","weight","json","neuronMap","connection","outputs","push","inputs","ActivationFuntionMap","logistic","AF","Logistic","sigmoid","Sigmoid","softsign","SoftSign","nextNeuronId","Neuron","activationFunction","getRandomActivationFunction","layer","undefined","ordinal","keys","sample","reduce","total","other","projected","output","arguments","random","preserveValues","af","key","stringFromActivationFunction","afString","ActivationFunctionFromString","Layer","bias","neurons","forEach","neuron","activate","projectTo","_refreshNeuronOrdinals","size","otherNeuron","map","index","allInputs","concat","neuronId","Vector","x","y","v","s","Math","sqrt","m","angle","cos","sin","magnitude","divide","atan2","a","setAngle","limit","setMagnitude","amt","dx","dy","vector","set","PI","str","parts","substring","split","parseFloat","Network","_createBiasNeuron","layers","inputValues","validate","Error","i","outputNeuron","isInput","_refreshLayerOrdinals","_chooseRandomLayer","otherLayer","chooseRandomNeuron","isProjectedTo","nodeRadius","nodeDistance","layerDistance","connections","layerConnections","neuronConnections","c","fromX","fromY","toX","toY","pos","add","copy","currentPosition","l","n","intensity","floor","abs","nodeColor","join","textColor","drawCircle","fillStyle","writeText","toFixed","font","textAlign","textBaseline","toJSON","Identity","mustNotBeEmpty","exclusions","searchSpace","range","difference","layerIndex","allConnections","slice","allNeurons","sum","data","JSON","parse","network","idToNeuronMap","neuronJson","FromJSON","layerJson","connectionJson","numConnections","maxPossibleConnections","product","addRandomConnection","topology","addLayer","addNeuron","PhysicalObject","force","Body","applyForce","otherObject","subtract","relativePosition","Bodies","nextPartId","Part","possibleConstructorReturn","getPrototypeOf","call","sides","radius","sensors","dm","da","movement","polygon","frictionAir","initializePhysics","applyForceFromCenter","RandomUnit","color","drawPolygon","vertices","globalAlpha","speed","useUniqueId","part","SetDefaultSensors","SetDefaultTriggers","angularSpeed","Composite","nextCreatureId","Creature","muscles","brain","muscle","stringify","render","translate","neuralData","sensor","times","partTriggers","muscleTriggers","creature","addMuscle","addPart","AddRandomPart","numSensors","numTriggers","mindSize","RandomlyPopulate","FullyConnect","partsMap","partData","muscleData","Simulation","universe","population","alive","maxPopulation","reproductionPercentile","_generateRandomPopulation","best","sort","b","fitness","numAllowedToLive","removed","pop","onIndividualRemoved","numSurvivors","_addIndividual","setup","individual","cloneFrom","clone","CreateRandom","width","height","setPosition","onIndividualAdded","Graphics","canvas","ctx","getContext","props","save","assign","restore","drawRectangle","_preDraw","beginPath","moveTo","lineTo","stroke","_postDraw","origin","arc","fill","vertex","closePath","fillRect","text","fillText","Engine","Mouse","MouseConstraint","World","Universe","individuals","_createPhysicsEngine","world","remove","update","drawBackground","dead","food","gravity","scale","mouse","mouseConstraint","constraint","angularStiffness","UniverseView","setState","runner","refs","react_default","createElement","ref","className","window","innerWidth","innerHeight","onMouseDown","onCanvasMouseDown","onMouseUp","onCanvasMouseUp","Component","App","src_UniverseView_0","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0573ab54.chunk.js","sourcesContent":["class Runner {\n\n    constructor(simulation) {\n        this.simulation = simulation;\n        this.state = 'stopped';\n        this.ticks = 1;\n        this.ticksPerSecond = 60;\n        this.secondsPerGeneration = 5;\n        this.ticksPerGeneration = this.ticksPerSecond * this.secondsPerGeneration;\n    }\n\n    start() {\n        this.clock = setInterval(this._tick.bind(this), 1000 / this.ticksPerSecond);\n        this.state = 'running';\n    }\n\n    pause() {\n        clearInterval(this.clock);\n        this.state = 'paused';\n    }\n\n    reset() {\n        this.pause();\n        this.simulation.reset();\n        this.state = 'stopped';\n    }\n\n    toggle() {\n        if (this.state === 'stopped' || this.state === 'paused') {\n            this.start();\n        } else {\n            this.pause();\n        }\n    }\n\n    _tick() {\n        this.simulation.tick(this.ticksPerSecond);\n        this.ticks++;\n        if (this.ticks > this.ticksPerGeneration) {\n            this.simulation.nextGeneration();\n            this.ticks = 1;\n        }\n    }\n}\n\nexport default Runner;\n","import _ from 'lodash';\nimport Matter from 'matter-js';\n\nconst Constraint = Matter.Constraint;\n\nlet nextMuscleId = 1;\nclass Muscle {\n\n    constructor(from, to, options) {\n        options = options || {};\n        this.id = options.id || nextMuscleId++;\n        this.from = from;\n        this.to = to;\n        this.length = options.length || 25;\n\n        this.physics = Constraint.create({\n            bodyA: from.physics,\n            bodyB: to.physics,\n            length: this.length,\n            stiffness: .2,\n            damping: .05,\n        });\n\n        this.triggers = [\n            (value) => this.physics.stiffness =  _.clamp(this.physics.stiffness + (value * .01), .01, .5)\n        ];\n    }\n\n    render(graphics) {\n        graphics.drawLine(this.from.position, this.to.position, {\n            lineWidth: 1 + (this.physics.stiffness * 4),\n            strokeStyle: '#AAAAFF'\n        });\n    }\n\n    toJSON() {\n        return {\n            id: this.id,\n            from: this.from.id,\n            to: this.to.id,\n            length: this.physics.length,\n        };\n    }\n}\n\nexport default Muscle;\n","class Connection {\n\n    constructor(from, to, weight) {\n        this.from = from;\n        this.to = to;\n        this.weight = weight;\n    }\n\n    get value() {\n        return this.from.value;\n    }\n\n    toJSON() {\n        return {\n            from: this.from.id,\n            to: this.to.id,\n            weight: this.weight,\n        };\n    }\n\n    static FromJSON(json, neuronMap) {\n        let from = neuronMap[json.from];\n        let to = neuronMap[json.to];\n        let connection = new Connection(from, to, json.weight);\n        from.outputs.push(connection);\n        to.inputs.push(connection);\n\n        return connection;\n    }\n}\n\nexport default Connection;\n","import _ from 'lodash';\nimport AF from 'activation-functions';\nimport Connection from './Connection';\n\nconst ActivationFuntionMap = {\n    // 'binarystep': AF.BinaryStep,\n    'logistic': AF.Logistic,\n    'sigmoid': AF.Sigmoid,\n    'softsign': AF.SoftSign,\n    // 'tanh': Math.tanh,\n};\n\nlet nextNeuronId = 1;\nclass Neuron {\n\n    constructor(options) {\n        options = options || {};\n        this.id = options.id || nextNeuronId++;\n        this.inputs = [];\n        this.outputs = [];\n        this.activationFunction = options.activationFunction || this.getRandomActivationFunction();\n        this.value = 0;\n        this.layer = options.layer || undefined;\n        this.ordinal = undefined;\n    }\n\n    getRandomActivationFunction() {\n        const keys = Object.keys(ActivationFuntionMap);\n        return ActivationFuntionMap[_.sample(keys)];\n    }\n\n    activate() {\n        if (this.layer === undefined || this.layer.ordinal > 0) {\n            this.value = this.inputs.reduce((total, connection) => total + (connection.value * connection.weight), 0);\n        }\n        \n        this.value = this.activationFunction(this.value);\n    }\n\n    isProjectedTo(other) {\n        return this.outputs.reduce((projected, output) => projected || output.to === other, false);\n    }\n\n    projectTo(other, weight = _.random(-1, 1, true)) {\n        let connection = new Connection(this, other, weight);\n        this.outputs.push(connection);\n        other.inputs.push(connection);\n        return connection;\n    }\n\n    toJSON(preserveValues = false) {\n        return {\n            id: this.id,\n            value: preserveValues ? this.value : 0,\n            af: stringFromActivationFunction(this.activationFunction),\n        };\n\n        function stringFromActivationFunction(af) {\n            for (let key in ActivationFuntionMap) {\n                if (ActivationFuntionMap[key] === af) {\n                    return key;\n                }\n            }\n\n            return 'identity';\n        }\n    }\n\n    static ActivationFunctionFromString(afString) {\n        return ActivationFuntionMap[afString];\n    }\n\n    static FromJSON(json) {\n        return new Neuron({\n            id: json.id,\n            activationFunction: this.ActivationFunctionFromString(json.af),\n        });\n    }\n}\n\nexport default Neuron;\n","import _ from 'lodash';\nimport Neuron from './Neuron';\n\nclass Layer {\n\n    constructor(bias) {\n        this.neurons = [];\n        this.bias = bias;\n        this.ordinal = undefined;\n    }\n\n    get inputs() {\n        return this.neurons.reduce((allInputs, neuron) => allInputs.concat(neuron.inputs), []);\n    }\n\n    get size() {\n        return this.neurons.length;\n    }\n\n    activate() {\n        this.neurons.forEach(neuron => neuron.activate());\n    }\n\n    addNeuron() {\n        let neuron = new Neuron({\n            layer: this,\n        });\n\n        if (this.ordinal > 0 && this.bias !== undefined) {\n            this.bias.projectTo(neuron);\n        }\n        \n        this.neurons.push(neuron);\n        this._refreshNeuronOrdinals();\n        return neuron;\n    }\n\n    chooseRandomNeuron() {\n        return this.size > 0 ? _.sample(this.neurons) : undefined;\n    }\n\n    projectTo(layer) {\n        if (this.size === 0 || layer.size === 0) {\n            return;\n        }\n\n        this.neurons.forEach(neuron => {\n            layer.neurons.forEach(otherNeuron => {\n                neuron.projectTo(otherNeuron);\n            });\n        });\n    }\n\n    toJSON() {\n        return {\n            neurons: this.neurons.map(neuron => neuron.id),\n        };\n    }\n\n    _refreshNeuronOrdinals() {\n        this.neurons.forEach((neuron, index) => neuron.ordinal = index);\n    }\n\n    static FromJSON(json, ordinal, neuronMap) {\n        // heuristic: we assume the bias is first neuron with id 'bias'\n        let layer = new Layer(neuronMap[1]);\n        layer.ordinal = ordinal;\n        json.neurons.forEach(neuronId => {\n            let neuron = neuronMap[neuronId];\n            neuron.layer = layer;\n            layer.neurons.push(neuronMap[neuronId]);\n        });\n\n        layer._refreshNeuronOrdinals();\n\n        return layer;\n    }\n}\n\nexport default Layer;\n","class Vector {\n\n    constructor(x, y) {\n        this.x = x || 0;\n        this.y = y || 0;\n    }\n\n    set(x, y) {\n        this.x = x;\n        this.y = y;\n        return this;\n    }\n\n    add(v) {\n        this.x += v.x;\n        this.y += v.y;\n        return this;\n    }\n\n    subtract(v) {\n        this.x -= v.x;\n        this.y -= v.y;\n        return this;\n    }\n\n    multiply(s) {\n        this.x *= s;\n        this.y *= s;\n        return this;\n    }\n\n    divide(s) {\n        this.x /= s;\n        this.y /= s;\n        return this;\n    }\n\n    magnitude() {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    setMagnitude(m) {\n        var angle = this.angle();\n        this.x = m * Math.cos(angle);\n        this.y = m * Math.sin(angle);\n        return this;\n    }\n\n    normalize() {\n        var magnitude = this.magnitude();\n        magnitude && this.divide(magnitude);\n        return this;\n    }\n\n    angle() {\n        return Math.atan2(this.y, this.x);\n    }\n\n    setAngle(a) {\n        var magnitude = this.magnitude();\n        this.x = magnitude * Math.cos(a);\n        this.y = magnitude * Math.sin(a);\n        return this;\n    }\n\n    rotate(a) {\n        this.setAngle(this.angle() + a);\n        return this;\n    }\n\n    limit(limit) {\n        var magnitude = this.magnitude();\n        if (magnitude > limit) {\n            this.setMagnitude(limit);\n        }\n\n        return this;\n    }\n\n    angleBetween(v) {\n        return this.angle() - v.angle();\n    }\n\n    dot(v) {\n        return this.x * v.x + this.y * v.y;\n    }\n\n    lerp(v, amt) {\n        this.x += (v.x - this.x) * amt;\n        this.y += (v.y - this.y) * amt;\n        return this;\n    }\n\n    distanceBetween(v) {\n        var dx = this.x - v.x;\n        var dy = this.y - v.y;\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    invert() {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    }\n\n    copy() {\n        return new Vector(this.x, this.y);\n    }\n\n    static RandomUnit() {\n        let vector = new Vector();\n        vector.set(1, 0);\n        vector.setAngle(Math.random() * Math.PI * 2);\n        return vector;\n    }\n\n    toString() {\n        return '(' + this.x + ',' + this.y + ')';\n    }\n\n    static FromString(str) {\n        str = str.substring(1, str.length - 1);\n        let parts = str.split(',');\n        return new Vector(parseFloat(parts[0]), parseFloat(parts[1]));\n    }\n}\n\nexport default Vector;\n","import _ from 'lodash';\nimport AF from 'activation-functions';\nimport Layer from './Layer';\nimport Vector from '../Vector';\nimport Neuron from './Neuron';\nimport Connection from './Connection';\n\nclass Network {\n\n    constructor() {\n        this.bias = this._createBiasNeuron();\n        this.layers = [];\n    }\n\n    get connections() {\n        return this.layers.reduce((allConnections, layer) => allConnections.concat(layer.inputs), []);\n    }\n\n    get hidden() {\n        return this.layers.slice(1, this.layers.length - 1);\n    }\n\n    get inputs() {\n        return this.layers[0];\n    }\n\n    get neurons() {\n        return this.layers.reduce((allNeurons, layer) => allNeurons.concat(layer.neurons), [this.bias]);\n    }\n\n    get outputs() {\n        return this.layers[this.layers.length - 1];\n    }\n\n    get size() {\n        return this.layers.reduce((sum, layer) => sum + layer.size);\n    }\n\n    activate(inputValues) {\n        this.validate();\n        if (inputValues.length !== this.inputs.size) {\n            throw new Error('mismatched number of NN input values (expected ' + \n                this.inputs.size + ', got ' + inputValues.length + ')');\n        }\n        \n        for (let i = 0; i < inputValues.length; i++) {\n            this.inputs.neurons[i].value = inputValues[i];\n        }\n\n        this.layers.forEach(layer => {\n            layer.activate();\n        });\n\n        return this.outputs.neurons.map(outputNeuron => outputNeuron.value);\n    }\n\n    addLayer(isInput = false) {\n        let layer = new Layer(isInput ? undefined : this.bias);\n        this.layers.push(layer);\n        this._refreshLayerOrdinals();\n        return layer;\n    }\n\n    addRandomConnection() {\n        let from, to;\n        do {\n            let layer = this._chooseRandomLayer(true);\n            let otherLayer = this._chooseRandomLayer(true, [layer.ordinal]);\n            let neuron = layer.chooseRandomNeuron();\n            let otherNeuron = otherLayer.chooseRandomNeuron();\n            if (otherLayer.ordinal > layer.ordinal) {\n                from = neuron;\n                to = otherNeuron;\n            } else {\n                from = otherNeuron;\n                to = neuron;\n            }\n        } while (from.isProjectedTo(to)); // disallow multiple connections between the same two neurons\n\n        return from.projectTo(to);\n    }\n\n    render(graphics, position, nodeRadius, nodeDistance, layerDistance) {\n        const connections = this.layers.reduce(\n            (layerConnections, layer) => layerConnections.concat(layer.neurons.reduce(\n                (neuronConnections, neuron) => neuronConnections.concat(neuron.outputs), [])), []);\n\n        // draw connections (first, so they appear behind nodes)\n        for (let c = 0; c < connections.length; c++) {\n            let fromX = connections[c].from.layer.ordinal;\n            let fromY = connections[c].from.ordinal;\n            let toX = connections[c].to.layer.ordinal;\n            let toY = connections[c].to.ordinal;\n\n            let pos = new Vector(position.x, position.y);\n            pos.add(new Vector(nodeRadius, nodeRadius));\n            let from = pos.copy().add(new Vector(\n                (2 * nodeRadius + layerDistance) * fromX,\n                (2 * nodeRadius + nodeDistance) * fromY));\n            let to = pos.copy().add(new Vector(\n                (2 * nodeRadius + layerDistance) * toX,\n                (2 * nodeRadius + nodeDistance) * toY));\n            graphics.drawLine(from, to, {\n                lineWidth: 1, // + (connections[c].weight * (connectionLineWeight - 1)),\n                strokeStyle: '#FFFFFF',\n            });\n        }\n\n        // draw nodes\n        let currentPosition = new Vector(position.x + nodeRadius, position.y + nodeRadius);\n        for (let l = 0; l < this.layers.length; l++) {\n            for (let n = 0; n < this.layers[l].size; n++) {\n                let intensity = Math.floor(256 * Math.abs(this.layers[l].neurons[n].value));\n                let nodeColor = 'rgb(' + [intensity, intensity, intensity].join(',') + ')';\n                let textColor = 'rgb(' + [255 - intensity, 255 - intensity, 255 - intensity].join(',') + ')';\n                graphics.drawCircle(currentPosition, nodeRadius, {\n                    lineWidth: 2,\n                    strokeStyle: '#FFFFFF',\n                    fillStyle: nodeColor,\n                });\n                graphics.writeText(currentPosition.x, currentPosition.y,\n                    this.layers[l].neurons[n].value.toFixed(2), {\n                        font: '12px sans-serif',\n                        fillStyle: textColor,\n                        textAlign: 'center',\n                        textBaseline: 'middle',\n                    });\n                currentPosition.y += 2 * nodeRadius + nodeDistance;\n            }\n            currentPosition.y = position.y + nodeRadius;\n            currentPosition.x += 2 * nodeRadius + layerDistance;\n        }\n    }\n\n    toJSON() {\n        return {\n            layers: this.layers.map(layer => layer.toJSON()),\n            neurons: this.neurons.map(neuron => neuron.toJSON()),\n            connections: this.connections.map(connection => connection.toJSON()),\n        };\n    }\n\n    validate() {\n        if (this.layers.length < 2) {\n            throw new Error('Invalid NN: too few layers (' + this.layers.length + ')');\n        }\n        else if (this.inputs.size === 0) {\n            throw new Error('Invalid NN: no input neurons present');\n        }\n        else if (this.outputs.size === 0) {\n            throw new Error('Invalid NN: no output neurons present');\n        }\n    }\n\n    _createBiasNeuron() {\n        return new Neuron({\n            id: 'bias',\n            activationFunction: AF.Identity,\n            value: 1,\n        });\n    }\n\n    _chooseRandomLayer(mustNotBeEmpty = false, exclusions = []) {\n        let searchSpace = _.range(0, this.layers.length);\n        searchSpace = _.difference(searchSpace, exclusions);\n\n        let layerIndex = _.sample(searchSpace);\n        while (mustNotBeEmpty && this.layers[layerIndex].size === 0) {\n            searchSpace = _.difference(searchSpace, [layerIndex]);\n            layerIndex = _.sample(searchSpace);\n        }\n\n        return this.layers[layerIndex];\n    }\n\n    _refreshLayerOrdinals() {\n        this.layers.forEach((layer, index) => layer.ordinal = index);\n    }\n\n    static FromJSON(json) {\n        let data = JSON.parse(json);\n        let network = new Network();\n\n        let neurons = data.neurons.map(neuronJson => Neuron.FromJSON(neuronJson));\n        let idToNeuronMap = neurons.reduce((map, neuron) => {\n            map[neuron.id] = neuron;\n            return map;\n        }, {});\n\n        network.layers = data.layers.map((layerJson, index) => Layer.FromJSON(layerJson, index, idToNeuronMap));\n        data.connections.forEach(connectionJson => Connection.FromJSON(connectionJson, idToNeuronMap));\n\n        return network;\n    }\n\n    static FullyConnect(network) {\n        for (let i = 0; i < network.layers.length - 1; i++) {\n            network.layers[i].projectTo(network.layers[i+1]);\n        }\n    }\n\n    static RandomlyConnect(network, numConnections = 0) {\n        if (numConnections === 0) {\n            let maxPossibleConnections = network.layers.reduce((product, layer) => product * layer.size, 1);\n            numConnections = _.random(1, maxPossibleConnections);\n        }\n\n        for (let i = 0; i < numConnections; i++) {\n            network.addRandomConnection(network);\n        }\n    }\n\n    static RandomlyPopulate(network, topology) {\n        if (topology.length < 2) {\n            throw new Error('Invalid topology; must contain at least 2 layers (received ' + topology.length + ')');\n        }\n        \n        for (let l = 0; l < topology.length; l++) {\n            let layer = network.addLayer(l === 0);\n            for (let n = 0; n < topology[l]; n++) {\n                layer.addNeuron();\n            }\n        }\n\n        network.outputs.neurons.forEach(neuron => neuron.activationFunction = AF.SoftSign);\n    }\n}\n\nexport default Network;\n","import Matter from 'matter-js';\nimport Vector from '../Vector';\n\nclass PhysicalObject {\n\n    constructor() {\n        this.physics = undefined;\n    }\n\n    initializePhysics() {\n        // upgrade Matter's vector implementation to use our Vector class\n        this.physics.position = new Vector(this.physics.position.x, this.physics.position.y);\n    }\n\n    get position() {\n        return this.physics.position.copy();\n    }\n\n    set position(position) {\n        this.physics.position = position;\n    }\n\n    applyForceFromCenter(force) {\n        Matter.Body.applyForce(this.physics, this.position, force);\n    }\n\n    getRelativePositionFrom(otherObject) {\n        return this.position.subtract(otherObject.position);\n    }\n\n    setRelativePositionFrom(otherObject, relativePosition) {\n        this.position = otherObject.position.add(relativePosition);\n    }\n}\n\nexport default PhysicalObject;\n","import _ from 'lodash';\nimport Matter from 'matter-js';\nimport PhysicalObject from './PhysicalObject';\nimport Vector from '../Vector';\n\nconst Bodies = Matter.Bodies;\n\nlet nextPartId = 1;\nclass Part extends PhysicalObject {\n\n    constructor(options) {\n        super();\n        options = options || {};\n        this.id = options.id || nextPartId++;\n        this.sides = options.sides || _.random(3, 6);\n        this.radius = options.radius || 10;\n        let position = options.position || new Vector(0, 0);\n        \n        this.sensors = [];\n        this.triggers = [];\n\n        // there's a better way to do this\n        this.ticks = 0;\n        this.dm = 0;\n        this.da = 0;\n        this.movement = 0;\n\n        this.physics = Bodies.polygon(position.x, position.y, this.sides, this.radius, {\n            frictionAir: .45,\n        });\n        this.initializePhysics();\n\n        // give the part an random push on birth\n        this.applyForceFromCenter(Vector.RandomUnit().setMagnitude(.01));\n    }\n\n    render(graphics) {\n        let color = 'hsla(' +\n            0 + ', ' +\n            100 + '%, ' +\n            (100 - (this.dm * 50)) + '%)';\n        \n        // shadow\n        graphics.drawPolygon(this.physics.vertices.map(v => { return { x: v.x + 3, y: v.y + 3 }; }), {\n            fillStyle: '#000000',\n            globalAlpha: .2,\n        });\n\n        graphics.drawPolygon(this.physics.vertices, {\n            fillStyle: color,\n            globalAlpha: .25 + (.75 * this.physics.frictionAir),\n        });\n    }\n\n    tick() {\n        this.movement += this.physics.speed;\n    }\n\n    toJSON() {\n        return {\n            id: this.id,\n            sides: this.sides,\n            radius: this.radius,\n        };\n    }\n\n    static FromJSON(json, useUniqueId = false) {\n        let data = JSON.parse(json);\n        let part = new Part({\n            id: useUniqueId ? nextPartId++ : data.id,\n            sides: data.sides,\n            radius: data.radius,\n        });\n\n        Part.SetDefaultSensors(part);\n        Part.SetDefaultTriggers(part);\n\n        return part;\n    }\n\n    static SetDefaultSensors(part) {\n        part.sensors = [\n            () => part.physics.speed,\n            () => part.physics.angle,\n            () => part.physics.angularSpeed,\n        ];\n    }\n\n    static SetDefaultTriggers(part) {\n        part.triggers = [\n            (value) => part.physics.frictionAir = _.clamp(part.physics.frictionAir + (value * .01), 0, .9),\n            (value) => part.dm = _.clamp(value, 0, 1),\n            (value) => part.da = _.clamp(value, -1, 1),\n            (value) => {\n                part.ticks++;\n                if (part.ticks % _.floor(value * 20) === 0) {\n                    part.applyForceFromCenter(new Vector(1, 1)\n                        .setAngle(Math.PI * 2 *  part.da)\n                        .setMagnitude(.0005 * part.dm));\n                    part.ticks = 0;\n                }\n            },\n        ];\n    }\n}\n\nexport default Part;\n","import _ from 'lodash';\nimport Matter from 'matter-js';\nimport Muscle from './Muscle';\nimport Network from '../neuralnetwork/Network';\nimport Part from './Part';\nimport Vector from '../Vector';\n\nconst Composite = Matter.Composite;\n\nlet nextCreatureId = 1;\nclass Creature {\n\n    constructor(options) {\n        options = options || {};\n        this.id = options.id || nextCreatureId++;\n        this.parts = [];\n        this.muscles = [];\n        this.physics = Composite.create();\n        this.movement = 0;\n        this.brain = options.brain || new Network();\n    }\n\n    get fitness() {\n        return this.movement;\n    }\n\n    get position() {\n        return this.parts[0].position;\n    }\n\n    get sensors() {\n        return this.parts.reduce((s, part) => s.concat(part.sensors), []);\n    }\n\n    get triggers() {\n        return this.parts.reduce((partTriggers, part) => partTriggers.concat(part.triggers), [])\n            .concat(this.muscles.reduce((muscleTriggers, muscle) => muscleTriggers.concat(muscle.triggers), []));\n    }\n\n    addMuscle(muscle) {\n        this.muscles.push(muscle);\n        Composite.add(this.physics, muscle.physics);\n    }\n\n    addPart(part) {\n        this.parts.push(part);\n        Composite.add(this.physics, part.physics);\n    }\n\n    clone() {\n        return Creature.FromJSON(JSON.stringify(this.toJSON()), true);\n    }\n\n    render(graphics, showNetwork = false) {\n        this.parts.forEach(part => part.render(graphics));\n        this.muscles.forEach(muscle => muscle.render(graphics));\n        if (showNetwork) {\n            // this.brain.render(graphics, new Vector(100, 100), 15, 30, 30, 4);\n        }\n    }\n\n    setPosition(position) {\n        // instantly set the position of the creature, without affecting physics\n\n        // heuristic: if there are no parts, just use (0, 0)\n        let currentPosition = this.parts.length > 0 ? this.position : new Vector(0, 0);\n\n        let relativePosition = position.copy().subtract(currentPosition);\n        Matter.Composite.translate(this.physics, relativePosition);\n    }\n\n    tick() {\n        let neuralData = this.brain.activate(this.sensors.map(sensor => sensor()));\n        _.times(neuralData.length, i => {\n            this.triggers[i](neuralData[i]);\n        });\n\n        this.parts.forEach(part => part.tick());\n        this.movement += this.parts.reduce((movement, part) => movement + part.movement, 0);\n    }\n\n    toJSON() {\n        return {\n            id: this.id,\n            parts: this.parts.map(part => part.toJSON()),\n            muscles: this.muscles.map(muscle => muscle.toJSON()),\n            brain: this.brain.toJSON(),\n        };\n    }\n\n    static AddRandomPart(creature) {\n        let part = new Part();\n        Part.SetDefaultSensors(part);\n        Part.SetDefaultTriggers(part);\n        \n        if (creature.parts.length > 0) {\n            let muscle = new Muscle(_.sample(creature.parts), part);\n            creature.addMuscle(muscle);\n        }\n\n        creature.addPart(part);\n\n        return part;\n    }\n\n    static CreateRandom() {\n        let creature = new Creature();\n        _.times(4, () => Creature.AddRandomPart(creature));\n\n        let numSensors = creature.sensors.length;\n        let numTriggers = creature.triggers.length;\n        let mindSize = _.random(numSensors, numTriggers);\n\n        // TODO: make network topology dynamic\n        Network.RandomlyPopulate(creature.brain, [numSensors, mindSize, numTriggers]);\n        Network.FullyConnect(creature.brain);\n\n        return creature;\n    }\n\n    static FromJSON(json, useUniqueId = false) {\n        let data = JSON.parse(json);\n        let creature = new Creature({\n            id: useUniqueId ? nextCreatureId++ : data.id,\n            brain: Network.FromJSON(JSON.stringify(data.brain)),\n        });\n\n        let partsMap = data.parts.reduce((map, partData) => {\n            map[partData.id] = Part.FromJSON(JSON.stringify(partData), true);\n            creature.addPart(map[partData.id]);\n            return map;\n        }, {});\n\n        data.muscles.forEach(muscleData => {\n            let from = partsMap[muscleData.from];\n            let to = partsMap[muscleData.to];\n            creature.addMuscle(new Muscle(from, to, {\n                id: muscleData.id,\n                length: muscleData.length,\n            }));\n        });\n\n        return creature;\n    }\n}\n\nexport default Creature;\n","import _ from 'lodash';\nimport Creature from '../creatures/Creature';\nimport Vector from '../Vector';\n\nclass Simulation {\n\n    constructor(universe) {\n        this.universe = universe;\n        this.population = {\n            alive: []\n        };\n\n        this.maxPopulation = 12;\n        this.reproductionPercentile = .33;\n\n        this.reset();\n        this._generateRandomPopulation(this.maxPopulation);\n    }\n\n    nextGeneration() {\n        let best = this.population.alive.sort((a, b) => b.fitness - a.fitness);\n        let numAllowedToLive = Math.floor(this.maxPopulation * this.reproductionPercentile);\n        while (best.length > numAllowedToLive) {\n            let removed = best.pop();\n            this.universe.onIndividualRemoved(removed);\n        }\n\n        this.reset();\n        this.population.alive = best;\n        let numSurvivors = best.length, i = 0;\n        while (best.length < this.maxPopulation) {\n            this._addIndividual(best[i % numSurvivors]);\n            i++;\n        }\n    }\n\n    reset() {\n        this.population.alive = [];\n        this.universe.setup(this.population);\n    }\n\n    tick(ticksPerSecond) {\n        this.population.alive.forEach(individual => individual.tick());\n        this.universe.tick(ticksPerSecond);\n    }\n\n    _addIndividual(cloneFrom) {\n        let individual = cloneFrom !== undefined ? cloneFrom.clone() : Creature.CreateRandom();\n        let position = new Vector(_.random(0, this.universe.width), _.random(0, this.universe.height));\n        individual.setPosition(position);\n\n        this.population.alive.push(individual);\n        this.universe.onIndividualAdded(individual);\n    }\n\n    _generateRandomPopulation(size) {\n        this.reset();\n        for (let i = 0; i < size; i++) {\n            this._addIndividual();\n        }\n    }\n}\n\nexport default Simulation;\n","class Graphics {\n\n    constructor(canvas) {\n        this.ctx = canvas.getContext('2d');\n        this.width = canvas.width;\n        this.height = canvas.height;\n    }\n\n    _preDraw(props) {\n        this.ctx.save();\n        Object.assign(this.ctx, props);\n    }\n\n    _postDraw() {\n        this.ctx.restore();\n    }\n\n    drawBackground(props) {\n        this.drawRectangle(0, 0, this.width, this.height, {\n            fillStyle: props.fillStyle || '#000000',\n        });\n    }\n\n    drawLine(from, to, props) {\n        this._preDraw(props);\n        this.ctx.beginPath();\n        this.ctx.moveTo(from.x, from.y);\n        this.ctx.lineTo(to.x, to.y);\n        this.ctx.stroke();\n        this._postDraw();\n    }\n\n    drawCircle(origin, radius, props) {\n        this._preDraw(props);\n        this.ctx.beginPath();\n        this.ctx.arc(origin.x, origin.y, radius, 0, 2 * Math.PI);\n        this.ctx.stroke();\n        this.ctx.fill();\n        this._postDraw();\n    }\n\n    drawPolygon(vertices, props) {\n        this._preDraw(props);\n        this.ctx.beginPath();\n\n        let vertex = vertices[0];\n        this.ctx.moveTo(vertex.x, vertex.y);\n        for (let i = 1; i < vertices.length; i++) {\n            vertex = vertices[i];\n            this.ctx.lineTo(vertex.x, vertex.y);\n        }\n\n        this.ctx.closePath();\n        this.ctx.fill();\n        this._postDraw();\n    }\n\n    drawRectangle(x, y, width, height, props) {\n        this._preDraw(props);\n        this.ctx.beginPath();\n        this.ctx.fillRect(x, y, width, height);\n        this._postDraw();\n    }\n\n    writeText(x, y, text, props) {\n        this._preDraw(props);\n        this.ctx.fillText(text, x, y);\n        this._postDraw();\n    }\n\n    drawOverlay(text, props) {\n        this._preDraw(props);\n\n        // transparent background for overlay\n        this.drawRectangle(0, 0, this.width, 30, {\n            fillStyle: 'rgba(100, 150, 255, .2)',\n        });\n\n        // print some info\n        this.ctx.font = '16px sans-serif';\n        this.ctx.fillStyle = 'black';\n\n        this.ctx.fillText(text, 10, 20);\n\n        this._postDraw();\n    }\n}\n\nexport default Graphics;\n","import Graphics from './Graphics';\nimport Matter from 'matter-js';\n\nconst Engine = Matter.Engine;\nconst Mouse = Matter.Mouse;\nconst MouseConstraint = Matter.MouseConstraint;\nconst World = Matter.World;\n\nclass Universe {\n\n    constructor(canvas) {\n        this.canvas = canvas;\n        this.graphics = new Graphics(this.canvas);\n        this.individuals = [];\n        this.physics = this._createPhysicsEngine();\n        this.reset();\n    }\n\n    get height() {\n        return this.canvas.height;\n    }\n\n    get width() {\n        return this.canvas.width;\n    }\n\n    onIndividualAdded(individual) {\n        World.add(this.physics.world, individual.physics);\n    }\n\n    onIndividualRemoved(individual) {\n        World.remove(this.physics.world, individual.physics);\n    }\n\n    tick() {\n        this.individuals.alive.forEach(individual => individual.tick());\n        Engine.update(this.physics, 1000 / 60);\n        this.render();\n    }\n\n    render() {\n        this.graphics.drawBackground({\n            fillStyle: '#444444',\n        });\n        this.individuals.alive.forEach((individual, i) => individual.render(this.graphics, !i));\n    }\n\n    reset() {\n        this.individuals = {\n            alive: [],\n            dead: [],\n        };\n\n        this.food = [];\n    }\n\n    setup(individuals) {\n        this.individuals = individuals;\n    }\n\n    _createPhysicsEngine() {\n        let physics = Engine.create({\n            world: World.create({\n                gravity: { x: 0, y: 0, scale: .001 },\n            }),\n        });\n\n        // add mouse control\n        let mouse = Mouse.create(this.graphics.canvas);\n        let mouseConstraint = MouseConstraint.create(physics, {\n            mouse: mouse,\n            constraint: {\n                // allow bodies on mouse to rotate\n                angularStiffness: 0,\n            }\n        });\n\n        World.add(physics.world, mouseConstraint);\n\n        // keep the mouse in sync with rendering\n        // render.mouse = mouse;\n\n        return physics;\n    }\n}\n\nexport default Universe;\n","import React, { Component } from 'react';\nimport Runner from './simulator/Runner';\nimport Simulation from './simulator/Simulation';\nimport Universe from './Universe';\n\nclass UniverseView extends Component {\n\n    componentWillMount() {\n        this.setState({\n            runner: null,\n        });\n    }\n\n    componentDidMount() {\n        let canvas = this.refs.canvas;\n        let universe = new Universe(canvas);\n        let simulation = new Simulation(universe);\n        let runner = new Runner(simulation);\n        this.setState({ runner: runner }, () => {\n            this.state.runner.start();\n        });\n    }\n\n    onCanvasMouseDown() {\n        // this.state.runner.pause();\n    }\n\n    onCanvasMouseUp() {\n        // this.state.runner.pause();\n        // this.state.runner.start();\n    }\n\n    render() {\n        return (\n            <canvas ref=\"canvas\"\n                className=\"Universe-canvas\"\n                width={window.innerWidth}\n                height={window.innerHeight}\n                onMouseDown={this.onCanvasMouseDown.bind(this)}\n                onMouseUp={this.onCanvasMouseUp.bind(this)}>\n            </canvas>\n        );\n    }\n}\n\nexport default UniverseView;\n","import React, { Component } from 'react';\nimport './App.css';\nimport './UniverseView.css';\nimport UniverseView from './UniverseView';\n\nclass App extends Component {\n\n    render() {\n        return (\n            <div className=\"App\">\n                <UniverseView ref=\"universe\" className=\"Universe\"></UniverseView>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}